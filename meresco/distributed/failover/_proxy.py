## begin license ##
#
# "Meresco Distributed" has components for group management based on "Meresco Components."
#
# Copyright (C) 2016 SURFmarket https://surf.nl
# Copyright (C) 2016 Seecr (Seek You Too B.V.) http://seecr.nl
#
# This file is part of "Meresco Distributed"
#
# "Meresco Distributed" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Distributed" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Distributed"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from weightless.core import asList, asString
from ._nginxconfig import _NginxConfig

class Proxy(_NginxConfig):
    def _generate(self, **kwargs):
        yield self.all.updateConfig(**kwargs)
        yield '## Generated by meresco.distributed.failover.Proxy\n\n'
        yield self.all.matchingServices()
        yield self.all.zones()
        yield '\nserver {\n'
        listenLinesDone = set()
        for listenLine in asString(self.all.listenLines()).split('\n'):
            if listenLine.strip() and listenLine not in listenLinesDone:
                yield listenLine + '\n'
                listenLinesDone.add(listenLine)
        yield '    server_name '
        all_servernames = []
        for name in asList(self.all.servernames()):
            if not name in all_servernames:
                all_servernames.append(name)
        servernames = ' '.join(all_servernames)
        if not servernames:
            raise ValueError('Cannot generate config without servername.')
        yield servernames
        yield ';\n\n'
        yield self.proxy_settings
        yield self.all.sslLines()
        locations = '\n'.join(asList(self.all.locations()))
        if not locations:
            yield self._allLocationsUnavailable()
        else:
            yield locations
        yield self._unavailable()
        yield '}\n'


    proxy_settings = '    proxy_set_header    Host $host;\n    proxy_set_header    X-Real-IP $remote_addr;\n    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n\n'

    def _unavailable(self):
        return '''
    error_page 500 502 503 504 =503 /unavailable.html;
    location /unavailable.html {
        root %s;
    }
    client_max_body_size 0;
''' % self._usrSharePath

    def _allLocationsUnavailable(self):
        return '''
    location / {
        location /unavailable.html {
        }
        return 503;
    }
'''

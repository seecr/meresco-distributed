## begin license ##
#
# "Meresco Distributed" has components for group management based on "Meresco Components."
#
# Copyright (C) 2016, 2018 Seecr (Seek You Too B.V.) http://seecr.nl
#
# This file is part of "Meresco Distributed"
#
# "Meresco Distributed" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Distributed" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Distributed"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

def header(tag, title, **kwargs):
    yield """<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="author" content="Seecr" />
    <title>{title}</title>
    <link rel="icon" href="/info/static/images/favicon.ico" type="image/gif"/>
    <link rel="stylesheet" type="text/css" href="/info/static/info.css?version={version}"/>
    <link rel="stylesheet" href="/info/static/css/seecr-view.css?version={version}"/>
    <link rel="stylesheet" href="/info/static/css/seecr-banner.css?version={version}"/>
    <link rel="stylesheet" href="/info/static/services.css?version={version}"/>
    <script type="text/javascript" src="/info/static/admin.js?version={version}"></script>
    <script type="text/javascript" src="/info/static/services.js?version={version}"></script>
    <script type="text/javascript" src="/info/static/javascript/jquery-1.11.2.min.js"></script>
    <script type="text/javascript" src="/info/static/javascript/jquery.autosize-1.18.13.min.js"></script>
    <script type="text/javascript" src="/info/static/javascript/seecr-toggleable.js?version={version}"></script>
</head>
<body class="info">
   <!-- ~~~~~ SEECR BANNER ~~~~~ -->
<div id="seecr-banner" class="vcard no-print">
    <div class="wrap">
        <h2>By <span class="org">Seecr</span></h2>
        <p class="note">Software Craftsmanship</p>
        <p>
            <a class="url" href="http://seecr.nl" rel="me" title="Visit the Seecr website">Seecr - Software Craftsmanship</a>
            A service by <span class="fn">Seecr</span>, <a href="mailto:info@seecr.nl" class="email">info@seecr.nl</a><br/>
        </p>
    </div>
</div>
   <!-- ~~~~~ / SEECR BANNER ~~~~~ -->
    """.format(title=escapeHtml(title), version=VERSION)
    with tag('div', class_=['main-content']):
        with tag('div', class_=['header']):
            with tag('div', id_='title'):
                with tag('h1'):
                    yield title
                    yield ' - '
                    yield VERSION
    yield '''<div id="content">\n'''


def footer(additionalScript=None, **kwargs):
    yield """
    </div>
    </div>
    <div class="serviceinfo"><p>{0} {1} ({2})</p></div>""".format(SERVICE_TYPE, identifier, VERSION)
    if additionalScript:
        yield '<script type="text/javascript">\n'
        yield additionalScript
        yield '\n</script>'

    yield """</body>
</html>"""

def defaultInfo(oaiInfo=False, extralinks=None, **kwargs):
    yield showProcessingStates(**kwargs)
    extralinks = extralinks or []
    if oaiInfo:
        extralinks.append(('/oai/info', 'Oai'))
    yield globalInfo(extralinks=extralinks, **kwargs)

def globalInfo(extralinks=None, showLogInfo=True, **kwargs):
    extralinks = [] if extralinks is None else extralinks
    yield '<h3>Globale informatie</h3>\n<ul>\n'
    if showLogInfo:
        yield '<li><a href="/info/loginfo">Service logs</a></li>\n'
    for link, text in extralinks:
        yield '<li><a href="{0}">{1}</a></li>\n'.format(link, escapeHtml(text))
    yield '<li><a href="/info/config">Config</a></li>\n'
    yield '</ul>\n'

def showProcessingStates(**kwargs):
    states = processingStates() if hasattr(processingStates, '__call__') else processingStates

    if not states:
        return
    yield '<h3>Status overzicht</h3>\n<ul>\n'
    for state in states:
        hasInfoPage = getattr(state, 'hasInfoPage', True)
        yield '<li class="error">' if state.errorState else '<li>'
        tokenInfoText = ""
        if hasattr(state, 'host') and state.host and hasattr(state, 'resumptionToken'):
            oaiPath = "http://%s:%s%s" % (vpnhost(state.host), state.port, state.path)
            resumptionToken = state.resumptionToken
            resumptionTokenLink = '<a href="%s/info/resumptiontoken?%s">status</a>' % (
                    oaiPath,
                    escapeHtml(urlencode(dict(resumptionToken=resumptionToken))),
                )
            if resumptionToken:
                tokenInfoText = " (%s)" % escapeHtml(resumptionToken)
            else:
                from_ = state.from_
                if from_:
                    scheduledAt = ""
                    if state.nextRequestTime:
                        scheduledAt = ', scheduled at %s' % ZuluTime.parseEpoch(state.nextRequestTime).formatDutch(time=True)
                    tokenInfoText = " (%s%s)" % (escapeHtml(from_), escapeHtml(scheduledAt))

            if hasInfoPage:
                try:
                    result = yield httpget(state.host, state.port, "%s/info/json/resumptiontoken?%s" % (state.path, urlencode(dict(resumptionToken=resumptionToken))))
                    header, body = result.split('\r\n\r\n')
                    info = loads(body)
                    timestamp = stamp2zulutime(info['timestamp'])
                    tokenInfoText = " (%s - %s records remaining - %s)" % (timestamp, formatInt(info['nrOfRemainingRecords']['total']), resumptionTokenLink)
                except Exception:
                    pass
        yield state.name
        yield tokenInfoText
        if hasattr(state, 'host') and state.host:
            path = '/info' if hasInfoPage else state.path
            port = '' if state.port == 80 else ':{0}'.format(state.port)
            yield ' - connected to: <a href="http://{0}{1}{2}">{3}{1}</a>'.format(vpnhost(state.host), port, path, state.host)
        yield ' - <em>PAUSED</em>' if getattr(state, 'paused', False) else ' - <em>active</em>'
        if state.errorState:
            yield '<br />%s' % escapeHtml(state.errorState)
        yield '</li>\n'
    yield '</ul>\n'

def vpnhost(host):
    return observable.call.getConfiguration().get('config', {}).get('vpn', {}).get('convertIps', {}).get(host, host)

def link(path, arguments, showApiKey=False, separateLink=False):
    if arguments:
        path += "?"
    argumentList = sorted(arguments.items())
    filteredArgumentsList = [(k,values) for k, values in argumentList if k != 'apikey']
    if not showApiKey:
        argumentList = filteredArgumentsList
    linkUrl = "%s%s" % (path, urlencode([(k,v) for k,values in argumentList for v in values], doseq=True))
    argumentsString = '&'.join('%s=%s' % (k, v) for (k,values) in filteredArgumentsList for v in values)
    if separateLink:
        return '%s%s [<a href="%s">link</a>]' % (escapeHtml(path), escapeHtml(argumentsString), escapeHtml(linkUrl))
    else:
        return '<a href="%s">%s%s</a>' % (escapeHtml(linkUrl), escapeHtml(path), escapeHtml(argumentsString))

def displayMessage(session, **kwargs):
    if 'message' in session:
        message = session['message']
        yield '<p class="%s">%s</p>' % (message['class'], escapeHtml(message['text']))
        del session['message']

def formatInt(integer):
    prefix = integer
    tails = []
    while prefix >= 1000:
        prefix, tail = prefix // 1000, prefix % 1000
        tails.insert(0, tail)
    if tails:
        return '%s.%s' % (prefix, '.'.join('%03d' % t for t in tails))
    return '%s' % prefix

## begin license ##
#
# "NBC+" also known as "ZP (ZoekPlatform)" is
#  a project of the Koninklijke Bibliotheek
#  and provides a search service for all public
#  libraries in the Netherlands.
#
# Copyright (C) 2014-2016 Seecr (Seek You Too B.V.) http://seecr.nl
# Copyright (C) 2014 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
# Copyright (C) 2015-2016 Koninklijke Bibliotheek (KB) http://www.kb.nl
#
# This file is part of "NBC+ (Zoekplatform BNL)"
#
# "NBC+ (Zoekplatform BNL)" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "NBC+ (Zoekplatform BNL)" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "NBC+ (Zoekplatform BNL)"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

def main(session, user, Method, Body, arguments, **kwargs):
    if not user.isAdmin():
        yield http.redirect('/')
        return
    if Method != 'POST':
        yield http.redirect('/services')
        return
    immediateFlagChange = arguments.get('immediate', ['False'])[0] == 'True'
    bodyArgs = parse_qs(Body)

    if "settings" in bodyArgs:
        session['useVpn'] = 'useVpn' in bodyArgs
        session['groupingKey'] = bodyArgs.get('groupingKey', [None])[0]
        config = observable.call.getConfig()
        config[ADMIN_DOWNLOAD_PERIOD_CONFIG_KEY] = int(bodyArgs["admin_download_period"][0])
        yield observable.all.saveConfig(config)
    else:
        for identifier, service in observable.call.listServices(activeOnly=False).items():
            for flag in SERVICE_FLAGS.values():
                value = (('%s_%s' % (identifier, flag)) in bodyArgs)
                immediate = immediateFlagChange or (('%s_%s_immediate' % (identifier, flag)) in bodyArgs)
                if immediate or value != service[flag.name]:
                    print immediate, flag, value, identifier
                    observable.call.setFlag(identifier, flag, value, immediate=immediate)
        if 'reEnableService' in bodyArgs:
            observable.call.reEnableService(bodyArgs['reEnableService'][0])
        elif 'deleteService' in bodyArgs:
            observable.call.deleteService(bodyArgs['deleteService'][0])


    yield http.redirect('/services')

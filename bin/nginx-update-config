#!/usr/bin/env python3
## begin license ##
#
# "Meresco Distributed" has components for group management based on "Meresco Components."
#
# Copyright (C) 2015 Koninklijke Bibliotheek (KB) http://www.kb.nl
# Copyright (C) 2015-2016 Seecr (Seek You Too B.V.) http://seecr.nl
# Copyright (C) 2015 Stichting Kennisnet http://www.kennisnet.nl
#
# This file is part of "Meresco Distributed"
#
# "Meresco Distributed" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "Meresco Distributed" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "Meresco Distributed"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from seecrdeps import includeParentAndDeps       #DO_NOT_DISTRIBUTE
includeParentAndDeps(__file__)                   #DO_NOT_DISTRIBUTE

from meresco.distributed.constants import READABLE, WRITABLE, READWRITE
from meresco.distributed.utils import usrSharePath
from seecr.utils import isRootUser
from os.path import join
from meresco.distributed.failover import Failover, Proxy, ServiceConfig, SslConfig, StaticLocations
from warnings import warn
from argparse import ArgumentParser


if __name__ == '__main__':
    warn('This script will disappear, please write your own custom script.', DeprecationWarning)
    parser = ArgumentParser()
    parser.add_argument('--adminHostname', help='Admin hostname', required=True)
    parser.add_argument('--adminPort', help='Admin port', default=10000, type=int)
    parser.add_argument('-q', '--quiet', help="Disable apache logging.", action="store_false", default=True, dest="verbose")
    parser.add_argument('-c', '--nginxConfigDir', help='Configuration directory with files included by default nginx configuration (defaults to /etc/nginx/sites-enabled)', default='/etc/nginx/sites-enabled')
    parser.add_argument('-t', '--type', help='Service type to write nginx configuration for (default: api)', default='api')
    parser.add_argument('-n', '--name', default=None, help='Service name, defaults to type')
    defaultNginxReloadCmd = 'svc -h /etc/service/nginx'
    parser.add_argument('--nginxReload', help='The command to reload nginx (default: "{default}")', default=defaultNginxReloadCmd)
    parser.add_argument('--minVersion', help='Select services with specified minimial version.', required=True)
    parser.add_argument('--untilVersion', help='Select services with specified with version below given version.', required=True)
    parser.add_argument('--unused', action='store_true', default=False, dest='unused', help='Show unused page')
    parser.add_argument('--flag', choices=['readable', 'writable'], dest='flags', action='append', help='Base active on flag readable or writable, multiple choices possible. Default readable')
    parser.add_argument('--usrSharePath', default=join(usrSharePath, 'failover'), help='Path containing unavailable.html and unused.html, defaults to "{default}"')
    parser.add_argument('--sharedSecret', help='Shared secret for updating as a service in admin', required=True)
    parser.add_argument('--sslCertificate', help='Path to ssl certificate. Will generate https proxy.')
    parser.add_argument('--sslKey', help='Path to ssl key. Will generate https proxy.')
    parser.add_argument('--endpoint', help='Connect to other address than default ipAddress and infoport from the service.')
    parser.add_argument('--additionalLocation', help="AdditionalLocation, mention complet nginx 'location' config")

    args = parser.parse_args()
    if args.nginxReload == defaultNginxReloadCmd and not isRootUser():
        print('Run as rootuser for default nginx restart script.')
        exit(2)


    name = args.name or args.type
    proxy = Proxy(
            usrSharePath=args.usrSharePath,
            nginxConfigFile=join(args.nginxConfigDir, '%s.frontend.conf' % name),
            name=name,
        )
    flags = args.flags or []
    flag = READABLE
    if 'writable' in flags:
        flag = WRITABLE
        if 'readable' in flags:
            flag = READWRITE
    proxy.addObserver(ServiceConfig(
            type=args.type,
            minVersion=args.minVersion,
            untilVersion=args.untilVersion,
            flag=flag,
            endpoint=args.endpoint,
            port=80 if not args.sslCertificate else 443,
            name=name,
        ))
    if args.sslKey and args.sslCertificate:
        proxy.addObserver(SslConfig(
                certificate=args.sslCertificate,
                key=args.sslKey,
            ))
    if args.additionalLocation:
        proxy.addObserver(StaticLocations(args.additionalLocation))
    if args.unused:
        raise ValueError('No longer supported. Please create your own')

    f = Failover()
    f.addConfiguration(proxy)

    f.main(**vars(args))



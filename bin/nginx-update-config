#!/usr/bin/env python
## begin license ##
#
# "NBC+" also known as "ZP (ZoekPlatform)" is
#  initiated by Stichting Bibliotheek.nl to provide a new search service
#  for all public libraries in the Netherlands.
# This package provides loadbalancer scripts
#
# Copyright (C) 2013-2014 Seecr (Seek You Too B.V.) http://seecr.nl
# Copyright (C) 2013-2014 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
#
# This file is part of "NBC+ (Zoekplatform BNL) Loadbalancer"
#
# "NBC+ (Zoekplatform BNL) Loadbalancer" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# "NBC+ (Zoekplatform BNL) Loadbalancer" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with "NBC+ (Zoekplatform BNL) Loadbalancer"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
## end license ##

from os.path import abspath, dirname                #DO_NOT_DISTRIBUTE
from os import system, getcwd                       #DO_NOT_DISTRIBUTE
from glob import glob                               #DO_NOT_DISTRIBUTE
from sys import path as systemPath, exit            #DO_NOT_DISTRIBUTE
parentdir = dirname(dirname(abspath(__file__)))     #DO_NOT_DISTRIBUTE
system('find .. -name "*.pyc" | xargs rm -f')       #DO_NOT_DISTRIBUTE
for path in glob(parentdir+'/deps.d/*'):            #DO_NOT_DISTRIBUTE
    systemPath.insert(0, path)                      #DO_NOT_DISTRIBUTE
systemPath.insert(0, parentdir)                     #DO_NOT_DISTRIBUTE

from os import system
from zp import VERSION
from zp.failover import NginxConfig
from seecr.utils import isRootUser, Version
from time import sleep

from zp.utils import ParseArguments, ConfigDownloadProcessor

if __name__ == '__main__':
    parser = ParseArguments(mandatoryKeys=['adminHostname', 'adminPort', 'verbose'])
    parser.addOption('-c', '--nginxConfigDir', type='str', help='Configuration directory with files included by default nginx configuration (defaults to /etc/nginx/conf.d)', default='/etc/nginx/conf.d')
    parser.addOption('-t', '--type', type='str', help='Service type to write nginx configuration for (default: api)', default='api')
    defaultNginxReloadCmd = 'svc -h /etc/service/nginx'
    parser.addOption('', '--nginxReload', type='str', help='The command to reload nginx (default: "{0}")'.format(defaultNginxReloadCmd), default=defaultNginxReloadCmd)
    defaultMinVersion = str(Version(VERSION).majorVersion())
    defaultUntilVersion = str(Version(VERSION).nextMajorVersion())
    parser.addOption('', '--minVersion', type='str', help='Select services with specified minimial version (default {0})'.format(defaultMinVersion), default=defaultMinVersion)
    parser.addOption('', '--untilVersion', type='str', help='Select services with specified with version below given version (default {0})'.format(defaultUntilVersion), default=defaultUntilVersion)

    options, arguments = parser.parse()
    if options.nginxReload == defaultNginxReloadCmd and not isRootUser():
        print 'Run as rootuser for default nginx restart script.'
        exit(2)

    configDownloadProcessor = ConfigDownloadProcessor.forDownload(statePath=None)
    configAndServices = configDownloadProcessor.download(options.adminHostname, options.adminPort)
    nginxConfig = NginxConfig(options.type, options.nginxConfigDir, verbose=options.verbose, minVersion=options.minVersion, untilVersion=options.untilVersion)

    mustUpdate, sleeptime = nginxConfig.updateConfig(configAndServices)
    if mustUpdate:
        system(options.nginxReload)
    sleep(sleeptime)


